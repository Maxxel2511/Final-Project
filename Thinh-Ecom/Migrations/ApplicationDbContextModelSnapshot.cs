// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Thinh_Ecom.Data;

namespace Thinh_Ecom.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "f49e4348-718f-43e3-b1f6-6dc89c5Bb5ff",
                            RoleId = "f49e4348-718f-43e3-b1f6-6dc89c5Bb4fd"
                        },
                        new
                        {
                            UserId = "DE544998-A3CC-4E12-ABB4-0642E57BD222",
                            RoleId = "360E601E-92F2-4F08-832B-604A21293258"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.About", b =>
                {
                    b.Property<int>("about_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("about_AppUserFK")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("about_Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("about_Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("about_Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("about_id");

                    b.HasIndex("about_AppUserFK");

                    b.ToTable("About");

                    b.HasData(
                        new
                        {
                            about_id = 1,
                            about_Description = "The Big Oxmox advised her not to do so, because there were thousands of bad Commas, wild Question Marks and devious Semikoli, but the Little Blind Text didn’t listen. She packed her seven versalia, put her initial into the belt and made herself on the way. \n \n When she reached the first hills of the Italic Mountains, she had a last view back on the skyline of her hometown Bookmarksgrove,the headline of Alphabet Village and the subline of her own road,the Line Lane.Pityful a rethoric question ran over her cheek,then she continued her way.",
                            about_Title = "Footwear the leading eCommerce Store around the Globe",
                            about_Url = "https://www.youtube.com/watch?v=F1vcruph8JA"
                        });
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.Bills", b =>
                {
                    b.Property<string>("bill_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("bill_Confirmation")
                        .HasColumnType("bit");

                    b.Property<DateTime>("bill_DatetimeOrder")
                        .HasColumnType("datetime2");

                    b.Property<int>("bill_Discount")
                        .HasColumnType("int");

                    b.Property<bool>("bill_HideStatus")
                        .HasColumnType("bit");

                    b.Property<string>("bill_Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("bill_PaidTotal")
                        .HasColumnType("int");

                    b.Property<string>("bill_PaymentMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bill_ProductIdlist")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bill_ProductNamelist")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bill_ProductPricelist")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bill_ProductSizelist")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bill_QuantityList")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("bill_Shipping")
                        .HasColumnType("int");

                    b.Property<string>("bill_UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("bill_WaitForConfirmation")
                        .HasColumnType("bit");

                    b.HasKey("bill_Id");

                    b.HasIndex("bill_UserId");

                    b.ToTable("Bills");

                    b.HasData(
                        new
                        {
                            bill_Id = "D269BF93-A5E2-4C4A-8146-9967DDE80D30",
                            IsDelete = false,
                            bill_Confirmation = true,
                            bill_DatetimeOrder = new DateTime(2022, 5, 13, 10, 35, 52, 360, DateTimeKind.Local).AddTicks(3171),
                            bill_Discount = 0,
                            bill_HideStatus = false,
                            bill_Note = "",
                            bill_PaidTotal = 2000,
                            bill_PaymentMethod = "Check Payment",
                            bill_ProductIdlist = "a6362e11-52f6-44dc-9ce9-0b238765a17a|104fba67-8a09-4302-a618-62b0dfb8d141|d00d7bdb-fb0d-464f-837d-89fa33f7f727|3d7357ba-603e-4152-85e8-a89316a947c1|",
                            bill_ProductNamelist = "product 1|product 2| product 3| product 4|",
                            bill_ProductPricelist = "550|450|350|640|",
                            bill_ProductSizelist = "7|8|9|14|",
                            bill_QuantityList = "1|1|2|1|",
                            bill_Shipping = 10,
                            bill_UserId = "f49e4348-718f-43e3-b1f6-6dc89c5Bb5ff",
                            bill_WaitForConfirmation = false
                        });
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.Cart", b =>
                {
                    b.Property<string>("cart_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("cart_UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("cart_Id");

                    b.HasIndex("cart_UserID");

                    b.ToTable("Carts");

                    b.HasData(
                        new
                        {
                            cart_Id = "72309286-ECBB-4D20-AD95-2819D31E3400",
                            cart_UserID = "f49e4348-718f-43e3-b1f6-6dc89c5Bb5ff"
                        },
                        new
                        {
                            cart_Id = "D355458F-1DD3-4834-AA28-6DA34B6357FF",
                            cart_UserID = "DE544998-A3CC-4E12-ABB4-0642E57BD222"
                        });
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.Categories", b =>
                {
                    b.Property<string>("cg_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("cg_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("cg_Sale")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("cg_Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("cg_Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            cg_Id = "d9e58de7-0891-4f1b-be24-10b3b28caf76",
                            IsDelete = false,
                            cg_Name = "Pizza",
                            cg_Sale = "",
                            cg_Type = ""
                        },
                        new
                        {
                            cg_Id = "224f06c6-fa53-43bb-a0cb-38fd086cc97a",
                            IsDelete = false,
                            cg_Name = "Spaghetti",
                            cg_Sale = "",
                            cg_Type = ""
                        },
                        new
                        {
                            cg_Id = "e8e1dcc6-21db-424a-bd82-5908dc12612d",
                            IsDelete = false,
                            cg_Name = "Sidedishes",
                            cg_Sale = "",
                            cg_Type = ""
                        },
                        new
                        {
                            cg_Id = "03bfd482-3a59-4e51-a97b-567e5c50f739",
                            IsDelete = false,
                            cg_Name = "Drink",
                            cg_Sale = "",
                            cg_Type = ""
                        });
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.ContactForm", b =>
                {
                    b.Property<string>("cf_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("cf_Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("cf_Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("cf_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("cf_Phone")
                        .HasColumnType("int");

                    b.Property<string>("cf_Subject")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("cf_Id");

                    b.ToTable("ContactUsers");

                    b.HasData(
                        new
                        {
                            cf_Id = "b79bda22-86c9-41fc-b18b-186eeebf34d2",
                            cf_Description = "Description",
                            cf_Email = "Email",
                            cf_Name = "Name",
                            cf_Phone = 123456789,
                            cf_Subject = "Subject"
                        });
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.Coupons", b =>
                {
                    b.Property<string>("couponId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("couponCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("couponPrice")
                        .HasColumnType("int");

                    b.Property<int>("couponPricePercen")
                        .HasColumnType("int");

                    b.Property<string>("coupon_AppUserFK")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("couponId");

                    b.HasIndex("coupon_AppUserFK");

                    b.ToTable("Coupons");

                    b.HasData(
                        new
                        {
                            couponId = "50796a38-0caa-43e8-bf2d-5aa47e2b6ccd",
                            EndTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            couponCode = "code10",
                            couponPrice = 10,
                            couponPricePercen = 0
                        },
                        new
                        {
                            couponId = "7967ed45-64c7-4250-b6d5-6536907a958c",
                            EndTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            couponCode = "code50",
                            couponPrice = 50,
                            couponPricePercen = 0
                        });
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.EmailGuest", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EmailGuest");
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.PriceForSize", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("SizeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PriceForSize");

                    b.HasData(
                        new
                        {
                            Id = "4971dcba-d8fd-4803-80bb-1c6a9d9d65fc",
                            Price = 10,
                            SizeName = "M"
                        },
                        new
                        {
                            Id = "16ada5f6-f061-426b-8a1e-39c84bfa2f28",
                            Price = 15,
                            SizeName = "L"
                        });
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.ProductInCart", b =>
                {
                    b.Property<string>("pic_CartId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("pic_ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("pic_amount")
                        .HasColumnType("int");

                    b.Property<string>("pic_color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pic_size")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("pic_CartId", "pic_ProductId");

                    b.HasIndex("pic_ProductId");

                    b.ToTable("ProductInCart");

                    b.HasData(
                        new
                        {
                            pic_CartId = "D355458F-1DD3-4834-AA28-6DA34B6357FF",
                            pic_ProductId = "a6362e11-52f6-44dc-9ce9-0b238765a17a",
                            pic_amount = 2
                        });
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.Products", b =>
                {
                    b.Property<string>("pd_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoriesFK")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("pd_Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pd_Img1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pd_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("pd_Price")
                        .HasColumnType("int");

                    b.Property<int>("pd_ReducePrice")
                        .HasColumnType("int");

                    b.Property<string>("pd_ShortDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pd_Size")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("pd_Id");

                    b.HasIndex("CategoriesFK");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            pd_Id = "a6362e11-52f6-44dc-9ce9-0b238765a17a",
                            CategoriesFK = "d9e58de7-0891-4f1b-be24-10b3b28caf76",
                            IsDelete = false,
                            pd_Description = "",
                            pd_Img1 = "/img/pizza/Extravaganza.png",
                            pd_Name = "Extravaganza",
                            pd_Price = 10,
                            pd_ReducePrice = 5,
                            pd_ShortDescription = "Tomato Sauce, Mozzarella Cheese, Pepperoni Sausage, Ham, Sausage, Beef Balls, Green Bell Peppers, Mushrooms, Onions, Olives",
                            pd_Size = ""
                        },
                        new
                        {
                            pd_Id = "104fba67-8a09-4302-a618-62b0dfb8d141",
                            CategoriesFK = "d9e58de7-0891-4f1b-be24-10b3b28caf76",
                            IsDelete = false,
                            pd_Description = "",
                            pd_Img1 = "/img/pizza/Haft-haft.png",
                            pd_Name = "Haft-haft",
                            pd_Price = 10,
                            pd_ReducePrice = 5,
                            pd_ShortDescription = "It is a topping combination of Ocean Mania pizza and Cheesy Chicken Bacon pizza",
                            pd_Size = ""
                        },
                        new
                        {
                            pd_Id = "d00d7bdb-fb0d-464f-837d-89fa33f7f727",
                            CategoriesFK = "d9e58de7-0891-4f1b-be24-10b3b28caf76",
                            IsDelete = false,
                            pd_Description = "",
                            pd_Img1 = "/img/pizza/Hawaiian.png",
                            pd_Name = "Hawaiian",
                            pd_Price = 10,
                            pd_ReducePrice = 5,
                            pd_ShortDescription = "Tomato Sauce, Mozzarella Cheese, Ham, Pineapple",
                            pd_Size = ""
                        },
                        new
                        {
                            pd_Id = "3d7357ba-603e-4152-85e8-a89316a947c1",
                            CategoriesFK = "d9e58de7-0891-4f1b-be24-10b3b28caf76",
                            IsDelete = false,
                            pd_Description = "",
                            pd_Img1 = "/img/pizza/Kid-mania.png",
                            pd_Name = "Kid-mania",
                            pd_Price = 10,
                            pd_ReducePrice = 5,
                            pd_ShortDescription = "Cheese Sauce, Mozzarella Cheese, Pickled Pork, Corn, Quail Egg",
                            pd_Size = ""
                        },
                        new
                        {
                            pd_Id = "f86ff220-84f7-4a51-acb5-cf2ae1b50d22",
                            CategoriesFK = "d9e58de7-0891-4f1b-be24-10b3b28caf76",
                            IsDelete = false,
                            pd_Description = "",
                            pd_Img1 = "/img/pizza/Meat-lover.png",
                            pd_Name = "Meat-lover",
                            pd_Price = 10,
                            pd_ReducePrice = 5,
                            pd_ShortDescription = "Tomato Sauce, Mozzarella Cheese, Pepperoni Sausage, Ham, Sausage, Beef Balls, Bacon",
                            pd_Size = ""
                        },
                        new
                        {
                            pd_Id = "9f340bc7-5362-4cf5-8f1f-858b1c8e093e",
                            CategoriesFK = "d9e58de7-0891-4f1b-be24-10b3b28caf76",
                            IsDelete = false,
                            pd_Description = "",
                            pd_Img1 = "/img/pizza/Cheese-mania.png",
                            pd_Name = "Cheese-mania",
                            pd_Price = 10,
                            pd_ReducePrice = 5,
                            pd_ShortDescription = "Tomato Sauce, Mozzarella Cheese",
                            pd_Size = ""
                        },
                        new
                        {
                            pd_Id = "3e18c9f3-dce2-4ba7-8c9f-5373bea66195",
                            CategoriesFK = "224f06c6-fa53-43bb-a0cb-38fd086cc97a",
                            IsDelete = false,
                            pd_Description = "",
                            pd_Img1 = "/img/pizza/Baked Bolognese Pasta.png",
                            pd_Name = "Baked Bolognese Pasta",
                            pd_Price = 10,
                            pd_ReducePrice = 5,
                            pd_ShortDescription = "Sauce Minced Beef Noodles, Mozzarella Cheese",
                            pd_Size = ""
                        },
                        new
                        {
                            pd_Id = "1ec44fe5-f408-4877-8499-b8e8fd312836",
                            CategoriesFK = "224f06c6-fa53-43bb-a0cb-38fd086cc97a",
                            IsDelete = false,
                            pd_Description = "",
                            pd_Img1 = "/img/pizza/Baked Seafood Pasta.png",
                            pd_Name = "Baked Seafood Pasta",
                            pd_Price = 10,
                            pd_ReducePrice = 5,
                            pd_ShortDescription = "Light spicy noodle sauce, shrimp, crab stick, squid, Mozzarella cheese",
                            pd_Size = ""
                        },
                        new
                        {
                            pd_Id = "3e5365b8-24b0-4bc3-8ffb-7b6cb4013dc1",
                            CategoriesFK = "224f06c6-fa53-43bb-a0cb-38fd086cc97a",
                            IsDelete = false,
                            pd_Description = "",
                            pd_Img1 = "/img/pizza/Baked Veggie Pasta.png",
                            pd_Name = "Baked Veggie Pasta",
                            pd_Price = 10,
                            pd_ReducePrice = 5,
                            pd_ShortDescription = "Sauce lightly spicy noodles, mushroom, green bell pepper, tomato, pineapple, black olive, mozzarella cheese.",
                            pd_Size = ""
                        },
                        new
                        {
                            pd_Id = "57db8d07-04b0-4f25-aa76-33b865677eac",
                            CategoriesFK = "e8e1dcc6-21db-424a-bd82-5908dc12612d",
                            IsDelete = false,
                            pd_Description = "",
                            pd_Img1 = "/img/pizza/BBQ-Chicken-Kickers.png",
                            pd_Name = "BBQ-Chicken-Kickers",
                            pd_Price = 10,
                            pd_ReducePrice = 5,
                            pd_ShortDescription = "Breaded Boneless Chicken served with delicious BBQ sauce.",
                            pd_Size = ""
                        },
                        new
                        {
                            pd_Id = "9aee924b-9666-4faa-a989-5a5d6fb9d1b7",
                            CategoriesFK = "e8e1dcc6-21db-424a-bd82-5908dc12612d",
                            IsDelete = false,
                            pd_Description = "",
                            pd_Img1 = "/img/pizza/Cheesy-backed-chicken.png",
                            pd_Name = "Cheesy-backed-chicken",
                            pd_Price = 10,
                            pd_ReducePrice = 5,
                            pd_ShortDescription = "Breaded chicken with fatty cheese, topped with bacon and served with BBQ sauce.",
                            pd_Size = ""
                        },
                        new
                        {
                            pd_Id = "154bb9e6-fe30-4771-9cc5-c6dbad2200fd",
                            CategoriesFK = "03bfd482-3a59-4e51-a97b-567e5c50f739",
                            IsDelete = false,
                            pd_Description = "",
                            pd_Img1 = "/img/pizza/Coke.png",
                            pd_Name = "Coke",
                            pd_Price = 10,
                            pd_ReducePrice = 5,
                            pd_ShortDescription = "Natural flavor",
                            pd_Size = ""
                        },
                        new
                        {
                            pd_Id = "86052b09-294e-44af-99bf-852d9798903b",
                            CategoriesFK = "03bfd482-3a59-4e51-a97b-567e5c50f739",
                            IsDelete = false,
                            pd_Description = "",
                            pd_Img1 = "/img/pizza/Coke-light.png",
                            pd_Name = "Coke-light",
                            pd_Price = 10,
                            pd_ReducePrice = 5,
                            pd_ShortDescription = "No sugar, for dieters",
                            pd_Size = ""
                        },
                        new
                        {
                            pd_Id = "94cf0e11-e3b8-441f-8000-33988be528d1",
                            CategoriesFK = "03bfd482-3a59-4e51-a97b-567e5c50f739",
                            IsDelete = false,
                            pd_Description = "",
                            pd_Img1 = "/img/pizza/Peach-tea.png",
                            pd_Name = "Peach-tea",
                            pd_Price = 10,
                            pd_ReducePrice = 5,
                            pd_ShortDescription = "It is a combination of the freshest green tea leaves and nutritious aromatic chia seeds, combined with the seductive sweet peach flavor to help boost energy.",
                            pd_Size = ""
                        });
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.Shipping", b =>
                {
                    b.Property<string>("ship_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ship_AppUserFK")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ship_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ship_Price")
                        .HasColumnType("int");

                    b.HasKey("ship_Id");

                    b.HasIndex("ship_AppUserFK");

                    b.ToTable("Shipping");

                    b.HasData(
                        new
                        {
                            ship_Id = "7CF94A7D-9239-446E-A404-086518F84652",
                            ship_Name = "Ship",
                            ship_Price = 5
                        });
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.SystemContact", b =>
                {
                    b.Property<int>("Contact_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Contact_Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contact_AppUserFK")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Contact_Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contact_Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contact_Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Contact_Id");

                    b.HasIndex("Contact_AppUserFK");

                    b.ToTable("ContactSystems");

                    b.HasData(
                        new
                        {
                            Contact_Id = 1,
                            Contact_Address = " 123, An Lac A Ward, Binh Tan District, HCM",
                            Contact_Email = "admin@gmail.com",
                            Contact_Phone = "0123456789",
                            Contact_Website = "https://shoes.com"
                        });
                });

            modelBuilder.Entity("Thinh_Ecom.Models.PaymentManagement", b =>
                {
                    b.Property<int>("IdConfirm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Check_Receive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name_Product")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<bool>("Status_Confirm")
                        .HasColumnType("bit");

                    b.Property<string>("Type_Payment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdConfirm");

                    b.ToTable("PaymentManagement");
                });

            modelBuilder.Entity("Thinh_Ecom.EntitiesThinh_Ecom.Entities.AppRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("AppRole");

                    b.HasData(
                        new
                        {
                            Id = "f49e4348-718f-43e3-b1f6-6dc89c5Bb4fd",
                            ConcurrencyStamp = "391b8325-0140-450e-9f5f-5a5f359ce815",
                            Name = "Staff",
                            NormalizedName = "Staff",
                            Description = "Staff",
                            IsDelete = false
                        },
                        new
                        {
                            Id = "360E601E-92F2-4F08-832B-604A21293258",
                            ConcurrencyStamp = "4a3c5e36-1158-4f3a-b192-0f4de2e1ad77",
                            Name = "Admin",
                            NormalizedName = "Admin",
                            Description = "admin",
                            IsDelete = false
                        });
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.AppUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<DateTime>("DoB")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user_Address1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user_Address2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user_City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user_CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user_Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user_PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user_PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user_State")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("AppUser");

                    b.HasData(
                        new
                        {
                            Id = "DE544998-A3CC-4E12-ABB4-0642E57BD222",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "66397f32-a2ed-4ae7-94e7-cf0424ac9223",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGTMmOYLyNIuTwE0zP7YTlC4RYUvE+31LqSFxOr9nQiJfXg8rn0MOsClZ6vs2CksyA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8ea89331-3993-46c3-83ac-6b3bb8bca146",
                            TwoFactorEnabled = false,
                            UserName = "Admin",
                            DoB = new DateTime(2020, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "admin",
                            IsDelete = false,
                            LastName = "admin"
                        },
                        new
                        {
                            Id = "f49e4348-718f-43e3-b1f6-6dc89c5Bb5ff",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e9486551-4dbc-4fab-80fc-67b9118ea73d",
                            Email = "staff@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "STAFF@GMAIL.COM",
                            NormalizedUserName = "STAFF@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECD6Ui4WoMZOszPACw6/TOR54X1J3jz+tn2sOnV/9p0Yh45p/n4tPzlO+UQCU9SUwA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fd7e7ff0-fa13-46f4-a800-81c8e6f80252",
                            TwoFactorEnabled = false,
                            UserName = "Staff",
                            DoB = new DateTime(2020, 3, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "staff",
                            IsDelete = false,
                            LastName = "staff"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.About", b =>
                {
                    b.HasOne("Thinh_Ecom.Entities.AppUser", "AppUser")
                        .WithMany("AboutU")
                        .HasForeignKey("about_AppUserFK");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.Bills", b =>
                {
                    b.HasOne("Thinh_Ecom.Entities.AppUser", "AppUserB")
                        .WithMany("BillsAU")
                        .HasForeignKey("bill_UserId");

                    b.Navigation("AppUserB");
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.Cart", b =>
                {
                    b.HasOne("Thinh_Ecom.Entities.AppUser", "AppUserC")
                        .WithMany("CartU")
                        .HasForeignKey("cart_UserID");

                    b.Navigation("AppUserC");
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.Coupons", b =>
                {
                    b.HasOne("Thinh_Ecom.Entities.AppUser", "AppUser")
                        .WithMany("CouponsU")
                        .HasForeignKey("coupon_AppUserFK");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.ProductInCart", b =>
                {
                    b.HasOne("Thinh_Ecom.Entities.Cart", "CartPICart")
                        .WithMany("ProductInCartC")
                        .HasForeignKey("pic_CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Thinh_Ecom.Entities.Products", "ProductsPICart")
                        .WithMany("ProductInCartP")
                        .HasForeignKey("pic_ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CartPICart");

                    b.Navigation("ProductsPICart");
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.Products", b =>
                {
                    b.HasOne("Thinh_Ecom.Entities.Categories", "Categories")
                        .WithMany("Products")
                        .HasForeignKey("CategoriesFK");

                    b.Navigation("Categories");
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.Shipping", b =>
                {
                    b.HasOne("Thinh_Ecom.Entities.AppUser", "AppUser")
                        .WithMany("ShippingU")
                        .HasForeignKey("ship_AppUserFK");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.SystemContact", b =>
                {
                    b.HasOne("Thinh_Ecom.Entities.AppUser", "AppUser")
                        .WithMany("SystemContactU")
                        .HasForeignKey("Contact_AppUserFK");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.Cart", b =>
                {
                    b.Navigation("ProductInCartC");
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.Categories", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.Products", b =>
                {
                    b.Navigation("ProductInCartP");
                });

            modelBuilder.Entity("Thinh_Ecom.Entities.AppUser", b =>
                {
                    b.Navigation("AboutU");

                    b.Navigation("BillsAU");

                    b.Navigation("CartU");

                    b.Navigation("CouponsU");

                    b.Navigation("ShippingU");

                    b.Navigation("SystemContactU");
                });
#pragma warning restore 612, 618
        }
    }
}
